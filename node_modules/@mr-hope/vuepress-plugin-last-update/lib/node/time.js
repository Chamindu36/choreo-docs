"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultTransformer = exports.getGitLastUpdatedTimeStamp = void 0;
const cross_spawn_1 = require("cross-spawn");
const path_1 = require("path");
const dayjs = require("dayjs");
const localizedFormat = require("dayjs/plugin/localizedFormat");
const utc = require("dayjs/plugin/utc"); // dependent on utc plugin
const timezone = require("dayjs/plugin/timezone");
require("dayjs/locale/en");
require("dayjs/locale/zh");
require("dayjs/locale/zh-cn");
dayjs.extend(localizedFormat);
dayjs.extend(utc);
dayjs.extend(timezone);
const getLang = (lang) => {
    const langcode = lang.toLowerCase();
    return langcode === "en-us" || langcode === "en-uk" ? "en" : langcode;
};
const getGitLastUpdatedTimeStamp = (filePath) => {
    try {
        const timestamp = cross_spawn_1.sync("git", ["log", "-1", "--format=%at", path_1.basename(filePath)], {
            cwd: path_1.dirname(filePath),
        }).stdout.toString();
        return parseInt(timestamp) * 1000;
    }
    catch (err) {
        /* do not handle for now */
        return undefined;
    }
};
exports.getGitLastUpdatedTimeStamp = getGitLastUpdatedTimeStamp;
const defaultTransformer = (timestamp, lang, timezone) => {
    dayjs.locale(getLang(lang));
    return timezone
        ? `${dayjs(timestamp).tz(timezone).format("LL")} ${dayjs(timestamp)
            .tz(timezone)
            .format("HH:mm")}`
        : `${dayjs(timestamp).format("LL")} ${dayjs(timestamp).format("HH:mm")}`;
};
exports.defaultTransformer = defaultTransformer;
//# sourceMappingURL=time.js.map