{"remainingRequest":"/home/shani/git/choreo-docs/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/shani/git/choreo-docs/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/shani/git/choreo-docs/node_modules/vue-loader/lib/index.js??ref--1-1!/home/shani/git/choreo-docs/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/home/shani/git/choreo-docs/src/concepts/develop/connector.md?vue&type=template&id=27247ca6&","dependencies":[{"path":"/home/shani/git/choreo-docs/src/concepts/develop/connector.md","mtime":1613996460631},{"path":"/home/shani/git/choreo-docs/node_modules/cache-loader/dist/cjs.js","mtime":1613035873893},{"path":"/home/shani/git/choreo-docs/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1613035874787},{"path":"/home/shani/git/choreo-docs/node_modules/cache-loader/dist/cjs.js","mtime":1613035873893},{"path":"/home/shani/git/choreo-docs/node_modules/vue-loader/lib/index.js","mtime":1613035874787},{"path":"/home/shani/git/choreo-docs/node_modules/@vuepress/markdown-loader/index.js","mtime":1613545251194}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}